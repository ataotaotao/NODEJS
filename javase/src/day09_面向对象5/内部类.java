package day09_面向对象5;

public class 内部类 {
	
	public static void test(Huan huan) {
		huan.m1();
	}
	
	public static void main(String [] args) {
		test(new Huan() {
			public void m1() {
				System.out.println("大缓缓");
			}
		});
	}
}

interface Huan{
	void m1();
}

/**
 * 
  	内部类   -> 外部类
  		内部类是写在一个类里面的类。
  	
  	常用的内部类
  		
  		1. 成员内部类
  			成员变量
  			成员内部类可以等同看作是成员变量
  			
  			成员内部类可以用访问控制权限修饰符修饰。
  			
  			成员内部类里面可以访问外部类的所有数据
  			
  			成员内部类里面不能有静态声明
  				可以看作是一个方法，里面在加载的时候就会执行。
  				
  			如何创建一个成员内部类的对象
  			先创建一个外部类的对象
  				内部类   in = 对象.new  内部类();
  			
  				
  		
  		
  		
  		
  		2. 局部内部类
  			
			局部内部类可以等同看作局部变量
			
			存在于方法体中
			
			局部内部类不能用控制访问修饰符修饰
			
			局部内部类里面可以访问外部类的所有数据
			
			局部内部类里面不能有静态声明
			
		重点：
			局部内部类里面可以访问局部变量，不过局部变量必须使用final修饰
			
			
			调用：
				外部不可以创建对象只能在方法体中或者内部类中。
  				
  				
  				
  				
  		
  		3. 静态内部类
  			
  			static class xxx{}
  			
  			静态内部类可以等同看作是静态变量
  				在类体中，方法体之外声明。
  				
  			可以使用访问控制权限修饰符修饰。
  			
  			静态内部类可以访问外部类的静态数据，不能直接访问成员。
  			
  			静态内部类里面可以有静态声明。
  			
  			如何创建一个静态内部类对象
  				类  in = new 外部类.类名();
  			
  			
  			
  		4. 匿名内部类
  			指内部类没有名字
  			
  			使用的最多的一种
  			
  			情景：
  				一个接口无法直接new，但是我们要使用的需要是这个接口的实现类，我们可以使用匿名内部类
  				就可以不用声明一个类
  				
  		
  			优缺点：
  				少写一个类。
  			缺点：
  				不能重复使用。
  
  
  
  
  
  
  
 *
 *
 */
